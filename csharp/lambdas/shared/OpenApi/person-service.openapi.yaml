openapi: 3.1.0
info:
  title: Person Service
  version: 1.0.0
  description: REST API to create and list persons. Events are published to EventBridge on successful creates.
servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com
    variables:
      apiId:
        default: your-api-id
      region:
        default: eu-west-1

paths:
  /persons:
    post:
      summary: Create a new person
      operationId: createPerson
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Required idempotency key; same key + same payload replays the same 201 response.
          schema:
            type: string
            minLength: 8
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    get:
      summary: List persons
      operationId: listPersons
      parameters:
        - name: limit
          in: query
          description: Page size (default 25, max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: nextToken
          in: query
          description: Opaque pagination token
          schema:
            type: string
      responses:
        '200':
          description: List of persons
          content:
            application/json:
              schema:
                type: object
                required: [ items ]
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonResponse'
                  nextToken:
                    type: string
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  schemas:
    PersonCreateRequest:
      type: object
      required: [ firstName, lastName, phoneNumber, address ]
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        phoneNumber:
          type: string
          description: Raw phone input (will be normalized to E.164)
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      required: [ street, number, city, postalCode, country ]
      properties:
        street: { type: string, minLength: 1, maxLength: 200 }
        number: { type: string, minLength: 1, maxLength: 20 }
        city: { type: string, minLength: 1, maxLength: 100 }
        postalCode: { type: string, minLength: 1, maxLength: 20 }
        country: { type: string, minLength: 2, maxLength: 2, description: ISO 3166-1 alpha-2 }
    PersonResponse:
      type: object
      required: [ personId, firstName, lastName, phoneE164, address, createdAt, updatedAt ]
      properties:
        personId: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phoneE164: { type: string, description: "Normalized E.164 phone" }
        address: { $ref: '#/components/schemas/Address' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    ProblemDetails:
      type: object
      description: RFC 7807 / RFC 9457 Problem Details
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string, format: uri }
        traceId: { type: string, description: Correlation id for troubleshooting }